/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * DRR API
 * OpenAPI spec version: 1.0.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import type {
  ApplicationResult,
  AttachmentUploadAttachmentBody,
  DeleteAttachment,
} from '../../model';

type HttpClientOptions = {
  headers?:
    | HttpHeaders
    | {
        [header: string]: string | string[];
      };
  context?: HttpContext;
  observe?: any;
  params?:
    | HttpParams
    | {
        [param: string]:
          | string
          | number
          | boolean
          | ReadonlyArray<string | number | boolean>;
      };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};

@Injectable({ providedIn: 'root' })
export class AttachmentService {
  constructor(private http: HttpClient) {}
  attachmentUploadAttachment<TData = ApplicationResult>(
    attachmentUploadAttachmentBody: AttachmentUploadAttachmentBody,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  attachmentUploadAttachment<TData = ApplicationResult>(
    attachmentUploadAttachmentBody: AttachmentUploadAttachmentBody,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  attachmentUploadAttachment<TData = ApplicationResult>(
    attachmentUploadAttachmentBody: AttachmentUploadAttachmentBody,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  attachmentUploadAttachment<TData = ApplicationResult>(
    attachmentUploadAttachmentBody: AttachmentUploadAttachmentBody,
    options?: HttpClientOptions,
  ): Observable<TData> {
    const formData = new FormData();
    if (
      attachmentUploadAttachmentBody.RecordId !== undefined &&
      attachmentUploadAttachmentBody.RecordId !== null
    ) {
      formData.append('RecordId', attachmentUploadAttachmentBody.RecordId);
    }
    if (
      attachmentUploadAttachmentBody.RecordType !== undefined &&
      attachmentUploadAttachmentBody.RecordType !== null
    ) {
      formData.append('RecordType', attachmentUploadAttachmentBody.RecordType);
    }
    if (
      attachmentUploadAttachmentBody.ContentType !== undefined &&
      attachmentUploadAttachmentBody.ContentType !== null
    ) {
      formData.append(
        'ContentType',
        attachmentUploadAttachmentBody.ContentType,
      );
    }
    if (
      attachmentUploadAttachmentBody.DocumentType !== undefined &&
      attachmentUploadAttachmentBody.DocumentType !== null
    ) {
      formData.append(
        'DocumentType',
        attachmentUploadAttachmentBody.DocumentType,
      );
    }
    if (
      attachmentUploadAttachmentBody.File !== undefined &&
      attachmentUploadAttachmentBody.File !== null
    ) {
      formData.append('File', attachmentUploadAttachmentBody.File);
    }

    return this.http.post<TData>(`/api/attachment`, formData, options);
  }
  attachmentDownloadAttachment<TData = Blob>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  attachmentDownloadAttachment<TData = Blob>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  attachmentDownloadAttachment<TData = Blob>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  attachmentDownloadAttachment<TData = Blob>(
    id: string,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.get<TData>(`/api/attachment/${id}`, {
      responseType: 'blob',
      ...options,
    });
  }
  attachmentDeleteAttachment<TData = ApplicationResult>(
    id: string,
    deleteAttachment: DeleteAttachment,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  attachmentDeleteAttachment<TData = ApplicationResult>(
    id: string,
    deleteAttachment: DeleteAttachment,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  attachmentDeleteAttachment<TData = ApplicationResult>(
    id: string,
    deleteAttachment: DeleteAttachment,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  attachmentDeleteAttachment<TData = ApplicationResult>(
    id: string,
    deleteAttachment: DeleteAttachment,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.delete<TData>(`/api/attachment/${id}`, {
      body: deleteAttachment,
      ...options,
    });
  }
}

export type AttachmentUploadAttachmentClientResult =
  NonNullable<ApplicationResult>;
export type AttachmentDownloadAttachmentClientResult = NonNullable<Blob>;
export type AttachmentDeleteAttachmentClientResult =
  NonNullable<ApplicationResult>;
