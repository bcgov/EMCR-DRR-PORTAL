/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * DRR API
 * OpenAPI spec version: 1.0.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import type {
  ApplicationResult,
  DRIFApplicationCreateFPFromEOIParams,
  DRIFApplicationGetParams,
  DeclarationResult,
  DraftEoiApplication,
  DraftFpApplication,
  EoiApplication,
  FpApplication,
  ScreenerQuestions,
  SubmissionResponse,
} from '../../model';

type HttpClientOptions = {
  headers?:
    | HttpHeaders
    | {
        [header: string]: string | string[];
      };
  context?: HttpContext;
  observe?: any;
  params?:
    | HttpParams
    | {
        [param: string]:
          | string
          | number
          | boolean
          | ReadonlyArray<string | number | boolean>;
      };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};

@Injectable({ providedIn: 'root' })
export class DrifapplicationService {
  constructor(private http: HttpClient) {}
  dRIFApplicationGet<TData = SubmissionResponse>(
    params?: DRIFApplicationGetParams,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  dRIFApplicationGet<TData = SubmissionResponse>(
    params?: DRIFApplicationGetParams,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  dRIFApplicationGet<TData = SubmissionResponse>(
    params?: DRIFApplicationGetParams,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  dRIFApplicationGet<TData = SubmissionResponse>(
    params?: DRIFApplicationGetParams,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.get<TData>(`/api/drifapplication`, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }
  dRIFApplicationGetDeclarations<TData = DeclarationResult>(
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  dRIFApplicationGetDeclarations<TData = DeclarationResult>(
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  dRIFApplicationGetDeclarations<TData = DeclarationResult>(
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  dRIFApplicationGetDeclarations<TData = DeclarationResult>(
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.get<TData>(`/api/drifapplication/declarations`, options);
  }
  dRIFApplicationGetEOI<TData = DraftEoiApplication>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  dRIFApplicationGetEOI<TData = DraftEoiApplication>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  dRIFApplicationGetEOI<TData = DraftEoiApplication>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  dRIFApplicationGetEOI<TData = DraftEoiApplication>(
    id: string,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.get<TData>(`/api/drifapplication/eoi/${id}`, options);
  }
  dRIFApplicationUpdateApplication<TData = ApplicationResult>(
    id: string,
    draftEoiApplication: DraftEoiApplication,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  dRIFApplicationUpdateApplication<TData = ApplicationResult>(
    id: string,
    draftEoiApplication: DraftEoiApplication,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  dRIFApplicationUpdateApplication<TData = ApplicationResult>(
    id: string,
    draftEoiApplication: DraftEoiApplication,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  dRIFApplicationUpdateApplication<TData = ApplicationResult>(
    id: string,
    draftEoiApplication: DraftEoiApplication,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.post<TData>(
      `/api/drifapplication/eoi/${id}`,
      draftEoiApplication,
      options,
    );
  }
  dRIFApplicationDeleteApplication<TData = ApplicationResult>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  dRIFApplicationDeleteApplication<TData = ApplicationResult>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  dRIFApplicationDeleteApplication<TData = ApplicationResult>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  dRIFApplicationDeleteApplication<TData = ApplicationResult>(
    id: string,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.delete<TData>(`/api/drifapplication/eoi/${id}`, options);
  }
  dRIFApplicationCreateEOIApplication<TData = ApplicationResult>(
    draftEoiApplication: DraftEoiApplication,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  dRIFApplicationCreateEOIApplication<TData = ApplicationResult>(
    draftEoiApplication: DraftEoiApplication,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  dRIFApplicationCreateEOIApplication<TData = ApplicationResult>(
    draftEoiApplication: DraftEoiApplication,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  dRIFApplicationCreateEOIApplication<TData = ApplicationResult>(
    draftEoiApplication: DraftEoiApplication,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.post<TData>(
      `/api/drifapplication/eoi`,
      draftEoiApplication,
      options,
    );
  }
  dRIFApplicationSubmitApplication<TData = ApplicationResult>(
    eoiApplication: EoiApplication,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  dRIFApplicationSubmitApplication<TData = ApplicationResult>(
    eoiApplication: EoiApplication,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  dRIFApplicationSubmitApplication<TData = ApplicationResult>(
    eoiApplication: EoiApplication,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  dRIFApplicationSubmitApplication<TData = ApplicationResult>(
    eoiApplication: EoiApplication,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.post<TData>(
      `/api/drifapplication/eoi/submit`,
      eoiApplication,
      options,
    );
  }
  dRIFApplicationSubmitApplication2<TData = ApplicationResult>(
    id: string,
    eoiApplication: EoiApplication,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  dRIFApplicationSubmitApplication2<TData = ApplicationResult>(
    id: string,
    eoiApplication: EoiApplication,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  dRIFApplicationSubmitApplication2<TData = ApplicationResult>(
    id: string,
    eoiApplication: EoiApplication,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  dRIFApplicationSubmitApplication2<TData = ApplicationResult>(
    id: string,
    eoiApplication: EoiApplication,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.post<TData>(
      `/api/drifapplication/eoi/${id}/submit`,
      eoiApplication,
      options,
    );
  }
  dRIFApplicationWithdrawApplication<TData = ApplicationResult>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  dRIFApplicationWithdrawApplication<TData = ApplicationResult>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  dRIFApplicationWithdrawApplication<TData = ApplicationResult>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  dRIFApplicationWithdrawApplication<TData = ApplicationResult>(
    id: string,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.post<TData>(
      `/api/drifapplication/eoi/${id}/withdraw`,
      undefined,
      options,
    );
  }
  dRIFApplicationGetFP<TData = DraftFpApplication>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  dRIFApplicationGetFP<TData = DraftFpApplication>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  dRIFApplicationGetFP<TData = DraftFpApplication>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  dRIFApplicationGetFP<TData = DraftFpApplication>(
    id: string,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.get<TData>(`/api/drifapplication/fp/${id}`, options);
  }
  dRIFApplicationUpdateFPApplication<TData = ApplicationResult>(
    id: string,
    draftFpApplication: DraftFpApplication,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  dRIFApplicationUpdateFPApplication<TData = ApplicationResult>(
    id: string,
    draftFpApplication: DraftFpApplication,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  dRIFApplicationUpdateFPApplication<TData = ApplicationResult>(
    id: string,
    draftFpApplication: DraftFpApplication,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  dRIFApplicationUpdateFPApplication<TData = ApplicationResult>(
    id: string,
    draftFpApplication: DraftFpApplication,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.post<TData>(
      `/api/drifapplication/fp/${id}`,
      draftFpApplication,
      options,
    );
  }
  dRIFApplicationDeleteFPApplication<TData = ApplicationResult>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  dRIFApplicationDeleteFPApplication<TData = ApplicationResult>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  dRIFApplicationDeleteFPApplication<TData = ApplicationResult>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  dRIFApplicationDeleteFPApplication<TData = ApplicationResult>(
    id: string,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.delete<TData>(`/api/drifapplication/fp/${id}`, options);
  }
  dRIFApplicationCreateFPFromEOI<TData = ApplicationResult>(
    screenerQuestions: ScreenerQuestions,
    params?: DRIFApplicationCreateFPFromEOIParams,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  dRIFApplicationCreateFPFromEOI<TData = ApplicationResult>(
    screenerQuestions: ScreenerQuestions,
    params?: DRIFApplicationCreateFPFromEOIParams,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  dRIFApplicationCreateFPFromEOI<TData = ApplicationResult>(
    screenerQuestions: ScreenerQuestions,
    params?: DRIFApplicationCreateFPFromEOIParams,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  dRIFApplicationCreateFPFromEOI<TData = ApplicationResult>(
    screenerQuestions: ScreenerQuestions,
    params?: DRIFApplicationCreateFPFromEOIParams,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.post<TData>(`/api/drifapplication/fp`, screenerQuestions, {
      ...options,
      params: { ...params, ...options?.params },
    });
  }
  dRIFApplicationSubmitFPApplication<TData = ApplicationResult>(
    id: string,
    fpApplication: FpApplication,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  dRIFApplicationSubmitFPApplication<TData = ApplicationResult>(
    id: string,
    fpApplication: FpApplication,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  dRIFApplicationSubmitFPApplication<TData = ApplicationResult>(
    id: string,
    fpApplication: FpApplication,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  dRIFApplicationSubmitFPApplication<TData = ApplicationResult>(
    id: string,
    fpApplication: FpApplication,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.post<TData>(
      `/api/drifapplication/fp/${id}/submit`,
      fpApplication,
      options,
    );
  }
  dRIFApplicationWithdrawFPApplication<TData = ApplicationResult>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  dRIFApplicationWithdrawFPApplication<TData = ApplicationResult>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  dRIFApplicationWithdrawFPApplication<TData = ApplicationResult>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  dRIFApplicationWithdrawFPApplication<TData = ApplicationResult>(
    id: string,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.post<TData>(
      `/api/drifapplication/fp/${id}/withdraw`,
      undefined,
      options,
    );
  }
}

export type DRIFApplicationGetClientResult = NonNullable<SubmissionResponse>;
export type DRIFApplicationGetDeclarationsClientResult =
  NonNullable<DeclarationResult>;
export type DRIFApplicationGetEOIClientResult =
  NonNullable<DraftEoiApplication>;
export type DRIFApplicationUpdateApplicationClientResult =
  NonNullable<ApplicationResult>;
export type DRIFApplicationDeleteApplicationClientResult =
  NonNullable<ApplicationResult>;
export type DRIFApplicationCreateEOIApplicationClientResult =
  NonNullable<ApplicationResult>;
export type DRIFApplicationSubmitApplicationClientResult =
  NonNullable<ApplicationResult>;
export type DRIFApplicationSubmitApplication2ClientResult =
  NonNullable<ApplicationResult>;
export type DRIFApplicationWithdrawApplicationClientResult =
  NonNullable<ApplicationResult>;
export type DRIFApplicationGetFPClientResult = NonNullable<DraftFpApplication>;
export type DRIFApplicationUpdateFPApplicationClientResult =
  NonNullable<ApplicationResult>;
export type DRIFApplicationDeleteFPApplicationClientResult =
  NonNullable<ApplicationResult>;
export type DRIFApplicationCreateFPFromEOIClientResult =
  NonNullable<ApplicationResult>;
export type DRIFApplicationSubmitFPApplicationClientResult =
  NonNullable<ApplicationResult>;
export type DRIFApplicationWithdrawFPApplicationClientResult =
  NonNullable<ApplicationResult>;
