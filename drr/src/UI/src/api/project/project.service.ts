/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * DRR API
 * OpenAPI spec version: 1.0.0
 */
import { HttpClient } from '@angular/common/http';
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse,
} from '@angular/common/http';
import { Injectable } from '@angular/core';
import { Observable } from 'rxjs';
import type {
  CanCreateReportResult,
  ConditionRequest,
  ConditionResult,
  CreateInvoice,
  CreateInvoiceResult,
  CreateReport,
  CreateReportResult,
  DraftConditionRequest,
  DraftDrrProject,
  DraftForecast,
  DraftProgressReport,
  DraftProjectClaim,
  DrrProject,
  Forecast,
  ForecastResult,
  InterimReport,
  ProgressReport,
  ProgressReportResult,
  ProjectClaim,
  ProjectClaimResult,
  ProjectCreateConditionRequestParams,
  ProjectResponse,
  ProjectResult,
} from '../../model';

type HttpClientOptions = {
  headers?:
    | HttpHeaders
    | {
        [header: string]: string | string[];
      };
  context?: HttpContext;
  observe?: any;
  params?:
    | HttpParams
    | {
        [param: string]:
          | string
          | number
          | boolean
          | ReadonlyArray<string | number | boolean>;
      };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};

@Injectable({ providedIn: 'root' })
export class ProjectService {
  constructor(private http: HttpClient) {}
  projectGet<TData = ProjectResponse>(
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  projectGet<TData = ProjectResponse>(
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  projectGet<TData = ProjectResponse>(
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  projectGet<TData = ProjectResponse>(
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.get<TData>(`/api/project`, options);
  }
  projectGetProject<TData = DraftDrrProject>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  projectGetProject<TData = DraftDrrProject>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  projectGetProject<TData = DraftDrrProject>(
    id: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  projectGetProject<TData = DraftDrrProject>(
    id: string,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.get<TData>(`/api/project/${id}`, options);
  }
  projectUpdateProject<TData = ProjectResult>(
    id: string,
    draftDrrProject: DraftDrrProject,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  projectUpdateProject<TData = ProjectResult>(
    id: string,
    draftDrrProject: DraftDrrProject,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  projectUpdateProject<TData = ProjectResult>(
    id: string,
    draftDrrProject: DraftDrrProject,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  projectUpdateProject<TData = ProjectResult>(
    id: string,
    draftDrrProject: DraftDrrProject,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.post<TData>(
      `/api/project/${id}`,
      draftDrrProject,
      options,
    );
  }
  projectSubmitProject<TData = ProjectResult>(
    id: string,
    drrProject: DrrProject,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  projectSubmitProject<TData = ProjectResult>(
    id: string,
    drrProject: DrrProject,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  projectSubmitProject<TData = ProjectResult>(
    id: string,
    drrProject: DrrProject,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  projectSubmitProject<TData = ProjectResult>(
    id: string,
    drrProject: DrrProject,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.post<TData>(
      `/api/project/${id}/submit`,
      drrProject,
      options,
    );
  }
  projectValidateCanCreateReport<TData = CanCreateReportResult>(
    projectId: string,
    createReport: CreateReport,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  projectValidateCanCreateReport<TData = CanCreateReportResult>(
    projectId: string,
    createReport: CreateReport,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  projectValidateCanCreateReport<TData = CanCreateReportResult>(
    projectId: string,
    createReport: CreateReport,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  projectValidateCanCreateReport<TData = CanCreateReportResult>(
    projectId: string,
    createReport: CreateReport,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.post<TData>(
      `/api/project/${projectId}/report/validate`,
      createReport,
      options,
    );
  }
  projectCreateReport<TData = CreateReportResult>(
    projectId: string,
    createReport: CreateReport,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  projectCreateReport<TData = CreateReportResult>(
    projectId: string,
    createReport: CreateReport,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  projectCreateReport<TData = CreateReportResult>(
    projectId: string,
    createReport: CreateReport,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  projectCreateReport<TData = CreateReportResult>(
    projectId: string,
    createReport: CreateReport,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.post<TData>(
      `/api/project/${projectId}/report`,
      createReport,
      options,
    );
  }
  projectGetInterimReport<TData = InterimReport>(
    projectId: string,
    reportId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  projectGetInterimReport<TData = InterimReport>(
    projectId: string,
    reportId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  projectGetInterimReport<TData = InterimReport>(
    projectId: string,
    reportId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  projectGetInterimReport<TData = InterimReport>(
    projectId: string,
    reportId: string,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.get<TData>(
      `/api/project/${projectId}/interim-reports/${reportId}`,
      options,
    );
  }
  projectGetClaim<TData = DraftProjectClaim>(
    projectId: string,
    reportId: string,
    claimId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  projectGetClaim<TData = DraftProjectClaim>(
    projectId: string,
    reportId: string,
    claimId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  projectGetClaim<TData = DraftProjectClaim>(
    projectId: string,
    reportId: string,
    claimId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  projectGetClaim<TData = DraftProjectClaim>(
    projectId: string,
    reportId: string,
    claimId: string,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.get<TData>(
      `/api/project/${projectId}/interim-reports/${reportId}/claims/${claimId}`,
      options,
    );
  }
  projectUpdateClaim<TData = ProjectClaimResult>(
    projectId: string,
    reportId: string,
    claimId: string,
    draftProjectClaim: DraftProjectClaim,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  projectUpdateClaim<TData = ProjectClaimResult>(
    projectId: string,
    reportId: string,
    claimId: string,
    draftProjectClaim: DraftProjectClaim,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  projectUpdateClaim<TData = ProjectClaimResult>(
    projectId: string,
    reportId: string,
    claimId: string,
    draftProjectClaim: DraftProjectClaim,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  projectUpdateClaim<TData = ProjectClaimResult>(
    projectId: string,
    reportId: string,
    claimId: string,
    draftProjectClaim: DraftProjectClaim,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.patch<TData>(
      `/api/project/${projectId}/interim-reports/${reportId}/claims/${claimId}`,
      draftProjectClaim,
      options,
    );
  }
  projectSubmitClaim<TData = ProjectClaimResult>(
    projectId: string,
    reportId: string,
    claimId: string,
    projectClaim: ProjectClaim,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  projectSubmitClaim<TData = ProjectClaimResult>(
    projectId: string,
    reportId: string,
    claimId: string,
    projectClaim: ProjectClaim,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  projectSubmitClaim<TData = ProjectClaimResult>(
    projectId: string,
    reportId: string,
    claimId: string,
    projectClaim: ProjectClaim,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  projectSubmitClaim<TData = ProjectClaimResult>(
    projectId: string,
    reportId: string,
    claimId: string,
    projectClaim: ProjectClaim,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.patch<TData>(
      `/api/project/${projectId}/interim-reports/${reportId}/claims/${claimId}/submit`,
      projectClaim,
      options,
    );
  }
  projectCreateInvoice<TData = CreateInvoiceResult>(
    projectId: string,
    reportId: string,
    claimId: string,
    createInvoice: CreateInvoice,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  projectCreateInvoice<TData = CreateInvoiceResult>(
    projectId: string,
    reportId: string,
    claimId: string,
    createInvoice: CreateInvoice,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  projectCreateInvoice<TData = CreateInvoiceResult>(
    projectId: string,
    reportId: string,
    claimId: string,
    createInvoice: CreateInvoice,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  projectCreateInvoice<TData = CreateInvoiceResult>(
    projectId: string,
    reportId: string,
    claimId: string,
    createInvoice: CreateInvoice,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.post<TData>(
      `/api/project/${projectId}/interim-reports/${reportId}/claims/${claimId}/invoice`,
      createInvoice,
      options,
    );
  }
  projectDeleteInvoice<TData = CreateInvoiceResult>(
    projectId: string,
    reportId: string,
    claimId: string,
    createInvoice: CreateInvoice,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  projectDeleteInvoice<TData = CreateInvoiceResult>(
    projectId: string,
    reportId: string,
    claimId: string,
    createInvoice: CreateInvoice,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  projectDeleteInvoice<TData = CreateInvoiceResult>(
    projectId: string,
    reportId: string,
    claimId: string,
    createInvoice: CreateInvoice,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  projectDeleteInvoice<TData = CreateInvoiceResult>(
    projectId: string,
    reportId: string,
    claimId: string,
    createInvoice: CreateInvoice,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.delete<TData>(
      `/api/project/${projectId}/interim-reports/${reportId}/claims/${claimId}/invoice`,
      { body: createInvoice, ...options },
    );
  }
  projectGetProgressReport<TData = DraftProgressReport>(
    projectId: string,
    reportId: string,
    progressId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  projectGetProgressReport<TData = DraftProgressReport>(
    projectId: string,
    reportId: string,
    progressId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  projectGetProgressReport<TData = DraftProgressReport>(
    projectId: string,
    reportId: string,
    progressId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  projectGetProgressReport<TData = DraftProgressReport>(
    projectId: string,
    reportId: string,
    progressId: string,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.get<TData>(
      `/api/project/${projectId}/interim-reports/${reportId}/progress-reports/${progressId}`,
      options,
    );
  }
  projectUpdateProgressReport<TData = ProgressReportResult>(
    projectId: string,
    reportId: string,
    progressId: string,
    draftProgressReport: DraftProgressReport,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  projectUpdateProgressReport<TData = ProgressReportResult>(
    projectId: string,
    reportId: string,
    progressId: string,
    draftProgressReport: DraftProgressReport,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  projectUpdateProgressReport<TData = ProgressReportResult>(
    projectId: string,
    reportId: string,
    progressId: string,
    draftProgressReport: DraftProgressReport,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  projectUpdateProgressReport<TData = ProgressReportResult>(
    projectId: string,
    reportId: string,
    progressId: string,
    draftProgressReport: DraftProgressReport,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.patch<TData>(
      `/api/project/${projectId}/interim-reports/${reportId}/progress-reports/${progressId}`,
      draftProgressReport,
      options,
    );
  }
  projectSubmitProgressReport<TData = ProgressReportResult>(
    projectId: string,
    reportId: string,
    progressId: string,
    progressReport: ProgressReport,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  projectSubmitProgressReport<TData = ProgressReportResult>(
    projectId: string,
    reportId: string,
    progressId: string,
    progressReport: ProgressReport,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  projectSubmitProgressReport<TData = ProgressReportResult>(
    projectId: string,
    reportId: string,
    progressId: string,
    progressReport: ProgressReport,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  projectSubmitProgressReport<TData = ProgressReportResult>(
    projectId: string,
    reportId: string,
    progressId: string,
    progressReport: ProgressReport,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.patch<TData>(
      `/api/project/${projectId}/interim-reports/${reportId}/progress-reports/${progressId}/submit`,
      progressReport,
      options,
    );
  }
  projectGetForecastReport<TData = DraftForecast>(
    projectId: string,
    reportId: string,
    forecastId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  projectGetForecastReport<TData = DraftForecast>(
    projectId: string,
    reportId: string,
    forecastId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  projectGetForecastReport<TData = DraftForecast>(
    projectId: string,
    reportId: string,
    forecastId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  projectGetForecastReport<TData = DraftForecast>(
    projectId: string,
    reportId: string,
    forecastId: string,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.get<TData>(
      `/api/project/${projectId}/interim-reports/${reportId}/forecasts/${forecastId}`,
      options,
    );
  }
  projectUpdateForecastReport<TData = ForecastResult>(
    projectId: string,
    reportId: string,
    forecastId: string,
    draftForecast: DraftForecast,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  projectUpdateForecastReport<TData = ForecastResult>(
    projectId: string,
    reportId: string,
    forecastId: string,
    draftForecast: DraftForecast,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  projectUpdateForecastReport<TData = ForecastResult>(
    projectId: string,
    reportId: string,
    forecastId: string,
    draftForecast: DraftForecast,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  projectUpdateForecastReport<TData = ForecastResult>(
    projectId: string,
    reportId: string,
    forecastId: string,
    draftForecast: DraftForecast,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.patch<TData>(
      `/api/project/${projectId}/interim-reports/${reportId}/forecasts/${forecastId}`,
      draftForecast,
      options,
    );
  }
  projectSubmitForecastReport<TData = ForecastResult>(
    projectId: string,
    reportId: string,
    forecastId: string,
    forecast: Forecast,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  projectSubmitForecastReport<TData = ForecastResult>(
    projectId: string,
    reportId: string,
    forecastId: string,
    forecast: Forecast,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  projectSubmitForecastReport<TData = ForecastResult>(
    projectId: string,
    reportId: string,
    forecastId: string,
    forecast: Forecast,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  projectSubmitForecastReport<TData = ForecastResult>(
    projectId: string,
    reportId: string,
    forecastId: string,
    forecast: Forecast,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.patch<TData>(
      `/api/project/${projectId}/interim-reports/${reportId}/forecasts/${forecastId}/submit`,
      forecast,
      options,
    );
  }
  projectGetConditionRequest<TData = DraftConditionRequest>(
    projectId: string,
    conditionId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  projectGetConditionRequest<TData = DraftConditionRequest>(
    projectId: string,
    conditionId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  projectGetConditionRequest<TData = DraftConditionRequest>(
    projectId: string,
    conditionId: string,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  projectGetConditionRequest<TData = DraftConditionRequest>(
    projectId: string,
    conditionId: string,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.get<TData>(
      `/api/project/${projectId}/condition-requests/by-condition/${conditionId}`,
      options,
    );
  }
  projectUpdateConditionRequest<TData = ConditionResult>(
    projectId: string,
    conditionId: string,
    draftConditionRequest: DraftConditionRequest,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  projectUpdateConditionRequest<TData = ConditionResult>(
    projectId: string,
    conditionId: string,
    draftConditionRequest: DraftConditionRequest,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  projectUpdateConditionRequest<TData = ConditionResult>(
    projectId: string,
    conditionId: string,
    draftConditionRequest: DraftConditionRequest,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  projectUpdateConditionRequest<TData = ConditionResult>(
    projectId: string,
    conditionId: string,
    draftConditionRequest: DraftConditionRequest,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.patch<TData>(
      `/api/project/${projectId}/condition-requests/by-condition/${conditionId}`,
      draftConditionRequest,
      options,
    );
  }
  projectSubmitConditionRequest<TData = ConditionResult>(
    projectId: string,
    conditionId: string,
    conditionRequest: ConditionRequest,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  projectSubmitConditionRequest<TData = ConditionResult>(
    projectId: string,
    conditionId: string,
    conditionRequest: ConditionRequest,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  projectSubmitConditionRequest<TData = ConditionResult>(
    projectId: string,
    conditionId: string,
    conditionRequest: ConditionRequest,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  projectSubmitConditionRequest<TData = ConditionResult>(
    projectId: string,
    conditionId: string,
    conditionRequest: ConditionRequest,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.patch<TData>(
      `/api/project/${projectId}/condition-requests/by-condition/${conditionId}/submit`,
      conditionRequest,
      options,
    );
  }
  projectCreateConditionRequest<TData = DraftConditionRequest>(
    projectId: string,
    params?: ProjectCreateConditionRequestParams,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' },
  ): Observable<TData>;
  projectCreateConditionRequest<TData = DraftConditionRequest>(
    projectId: string,
    params?: ProjectCreateConditionRequestParams,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' },
  ): Observable<AngularHttpResponse<TData>>;
  projectCreateConditionRequest<TData = DraftConditionRequest>(
    projectId: string,
    params?: ProjectCreateConditionRequestParams,
    options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' },
  ): Observable<HttpEvent<TData>>;
  projectCreateConditionRequest<TData = DraftConditionRequest>(
    projectId: string,
    params?: ProjectCreateConditionRequestParams,
    options?: HttpClientOptions,
  ): Observable<TData> {
    return this.http.post<TData>(
      `/api/project/${projectId}/condition-request`,
      undefined,
      {
        ...options,
        params: { ...params, ...options?.params },
      },
    );
  }
}

export type ProjectGetClientResult = NonNullable<ProjectResponse>;
export type ProjectGetProjectClientResult = NonNullable<DraftDrrProject>;
export type ProjectUpdateProjectClientResult = NonNullable<ProjectResult>;
export type ProjectSubmitProjectClientResult = NonNullable<ProjectResult>;
export type ProjectValidateCanCreateReportClientResult =
  NonNullable<CanCreateReportResult>;
export type ProjectCreateReportClientResult = NonNullable<CreateReportResult>;
export type ProjectGetInterimReportClientResult = NonNullable<InterimReport>;
export type ProjectGetClaimClientResult = NonNullable<DraftProjectClaim>;
export type ProjectUpdateClaimClientResult = NonNullable<ProjectClaimResult>;
export type ProjectSubmitClaimClientResult = NonNullable<ProjectClaimResult>;
export type ProjectCreateInvoiceClientResult = NonNullable<CreateInvoiceResult>;
export type ProjectDeleteInvoiceClientResult = NonNullable<CreateInvoiceResult>;
export type ProjectGetProgressReportClientResult =
  NonNullable<DraftProgressReport>;
export type ProjectUpdateProgressReportClientResult =
  NonNullable<ProgressReportResult>;
export type ProjectSubmitProgressReportClientResult =
  NonNullable<ProgressReportResult>;
export type ProjectGetForecastReportClientResult = NonNullable<DraftForecast>;
export type ProjectUpdateForecastReportClientResult =
  NonNullable<ForecastResult>;
export type ProjectSubmitForecastReportClientResult =
  NonNullable<ForecastResult>;
export type ProjectGetConditionRequestClientResult =
  NonNullable<DraftConditionRequest>;
export type ProjectUpdateConditionRequestClientResult =
  NonNullable<ConditionResult>;
export type ProjectSubmitConditionRequestClientResult =
  NonNullable<ConditionResult>;
export type ProjectCreateConditionRequestClientResult =
  NonNullable<DraftConditionRequest>;
