/**
 * Generated by orval v7.3.0 üç∫
 * Do not edit manually.
 * DRR API
 * OpenAPI spec version: 1.0.0
 */
import {
  HttpClient
} from '@angular/common/http'
import type {
  HttpContext,
  HttpEvent,
  HttpHeaders,
  HttpParams,
  HttpResponse as AngularHttpResponse
} from '@angular/common/http'
import {
  Injectable
} from '@angular/core'
import {
  Observable
} from 'rxjs'
import type {
  DraftDrrProject,
  DrrProject,
  ProjectResponse,
  ProjectResult
} from '../../model'


type HttpClientOptions = {
  headers?: HttpHeaders | {
      [header: string]: string | string[];
  };
  context?: HttpContext;
  observe?: any;
  params?: HttpParams | {
    [param: string]: string | number | boolean | ReadonlyArray<string | number | boolean>;
  };
  reportProgress?: boolean;
  responseType?: any;
  withCredentials?: boolean;
};



@Injectable({ providedIn: 'root' })
export class ProjectService {
  constructor(
    private http: HttpClient,
  ) {} projectGet<TData = ProjectResponse>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    projectGet<TData = ProjectResponse>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    projectGet<TData = ProjectResponse>(
     options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;projectGet<TData = ProjectResponse>(
     options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `/api/project`,options
    );
  }
 projectGetProject<TData = DraftDrrProject>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    projectGetProject<TData = DraftDrrProject>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    projectGetProject<TData = DraftDrrProject>(
    id: string, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;projectGetProject<TData = DraftDrrProject>(
    id: string, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.get<TData>(
      `/api/project/${id}`,options
    );
  }
 projectUpdateProject<TData = ProjectResult>(
    id: string,
    draftDrrProject: DraftDrrProject, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    projectUpdateProject<TData = ProjectResult>(
    id: string,
    draftDrrProject: DraftDrrProject, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    projectUpdateProject<TData = ProjectResult>(
    id: string,
    draftDrrProject: DraftDrrProject, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;projectUpdateProject<TData = ProjectResult>(
    id: string,
    draftDrrProject: DraftDrrProject, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `/api/project/${id}`,
      draftDrrProject,options
    );
  }
 projectSubmitProject<TData = ProjectResult>(
    id: string,
    drrProject: DrrProject, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'body' }
  ): Observable<TData>;
    projectSubmitProject<TData = ProjectResult>(
    id: string,
    drrProject: DrrProject, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'response' }
  ): Observable<AngularHttpResponse<TData>>;
    projectSubmitProject<TData = ProjectResult>(
    id: string,
    drrProject: DrrProject, options?: Omit<HttpClientOptions, 'observe'> & { observe?: 'events' }
  ): Observable<HttpEvent<TData>>;projectSubmitProject<TData = ProjectResult>(
    id: string,
    drrProject: DrrProject, options?: HttpClientOptions
  ): Observable<TData>  {
    return this.http.post<TData>(
      `/api/project/${id}/submit`,
      drrProject,options
    );
  }
};

export type ProjectGetClientResult = NonNullable<ProjectResponse>
export type ProjectGetProjectClientResult = NonNullable<DraftDrrProject>
export type ProjectUpdateProjectClientResult = NonNullable<ProjectResult>
export type ProjectSubmitProjectClientResult = NonNullable<ProjectResult>
